use async_trait::async_trait;
use libp2p::{
	identity,
	swarm::{NetworkBehaviour, SwarmEvent},
	Multiaddr, Swarm,
};
use std::fmt::Debug;

#[async_trait]
/// Extension trait for libp2p Swarm providing in-memory networking utilities.
///
/// This trait adds convenience methods for common networking operations including:
/// - Creating test swarms with memory transport
/// - Establishing peer connections
/// - Event handling and filtering
/// - Network listening management
///
/// Primarily designed for testing scenarios.
pub trait SwarmTestingExt {
	/// The network behavior type associated with this swarm.
	type Behavior: NetworkBehaviour;

	/// Creates a new swarm instance with memory-based transport.
	///
	/// This method is ideal for testing as it uses in-memory transport
	/// which doesn't require actual network interfaces.
	///
	/// # Arguments
	/// * `behavior_factory` - A closure that creates the network behavior given a keypair
	fn with_memory_transport(
		behavior_factory: impl FnOnce(identity::Keypair) -> Self::Behavior,
	) -> Self
	where
		Self: Sized;

	/// Establishes a bidirectional connection between this swarm and another.
	///
	/// This method handles the connection establishment process and waits
	/// for the connection to be fully established.
	///
	/// # Arguments
	/// * `peer_swarm` - The target swarm to connect to
	///
	/// # Errors
	/// Returns an error if the connection cannot be established.
	async fn connect_to_peer<T>(&mut self, peer_swarm: &mut Swarm<T>)
	where
		T: NetworkBehaviour + Send,
		<T as NetworkBehaviour>::ToSwarm: Debug;

	/// Retrieves the next swarm event from the event stream.
	///
	/// This includes both behavior events and swarm-level events
	/// (connections, listening, etc.).
	///
	/// # Returns
	/// The next `SwarmEvent` containing either a behavior event or swarm event.
	async fn next_swarm_event(
		&mut self,
	) -> SwarmEvent<<Self::Behavior as NetworkBehaviour>::ToSwarm>;

	/// Retrieves the next behavior-specific event, filtering out swarm events.
	///
	/// This method automatically filters out swarm-level events and only
	/// returns events generated by the network behavior.
	///
	/// # Returns
	/// The next behavior event.
	async fn next_behavior_event(&mut self) -> <Self::Behavior as NetworkBehaviour>::ToSwarm;

	/// Waits for a specific swarm event matching the provided condition.
	///
	/// This method continuously polls events until one matches the predicate.
	/// All non-matching events are discarded.
	///
	/// # Arguments
	/// * `event_matcher` - A function that returns `Some(result)` for matching events
	///
	/// # Returns
	/// The extracted value from the first matching event.
	async fn wait_for_swarm_event<ExtractedEvent, Matcher>(
		&mut self,
		event_matcher: Matcher,
	) -> ExtractedEvent
	where
		Matcher:
			Fn(SwarmEvent<<Self::Behavior as NetworkBehaviour>::ToSwarm>) -> Option<ExtractedEvent>,
		Matcher: Send;

	/// Waits for a specific behavior event matching the provided condition.
	///
	/// Similar to `wait_for_swarm_event` but only considers behavior events,
	/// automatically filtering out swarm-level events.
	///
	/// # Arguments
	/// * `event_matcher` - A function that returns `Some(result)` for matching events
	///
	/// # Returns
	/// The extracted value from the first matching behavior event.
	async fn wait_for_behavior_event<ExtractedEvent, Matcher>(
		&mut self,
		event_matcher: Matcher,
	) -> ExtractedEvent
	where
		Matcher: Fn(<Self::Behavior as NetworkBehaviour>::ToSwarm) -> Option<ExtractedEvent>,
		Matcher: Send;

	/// Starts listening for incoming connections on an available address.
	///
	/// This method automatically selects an available address and begins
	/// listening for incoming peer connections.
	///
	/// # Returns
	/// The multiaddress that the swarm is now listening on.
	///
	/// # Errors
	/// Returns an error if no suitable listening address can be found or bound.
	async fn start_listening(&mut self) -> Multiaddr;
}
